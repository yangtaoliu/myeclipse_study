<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.1.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.1.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.1.xsd ">
<!-- 配置SqlSessionFactory
从spring和mybatis的整合包中获取
 -->
<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <!-- 加载数据源 -->
    <property name="dataSource" ref="dataSource"/>
    <!-- 配置SqlMapConfig.xml -->
    <property name="configLocation" value="classpath:mybatis/SqlMapConfig.xml"/>
</bean>

	<!-- 
		使用MapperFactoryBean 生成mapper的代理对象,多个mapper配置起来麻烦
		配置mapper接口和sqlSessionFactory
	 -->
<!-- <bean id="sysuserMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">  
  <property name="mapperInterface" value="yycg.base.dao.mapper.SysuserMapper"/>
  <property name="sqlSessionFactory" ref="sqlSessionFactory"/>
</bean> -->

<!-- 
	Spring和mybatis整合,dao开发
	方法1：
		程序员创建dao接口及dao接口的实现类，
		
		Dao接口实现类继承SqlSessionDaoSupport
		在spring容器中配置dao接口，并将SqlSessionFactory注入到dao接口实现中，
		在dao接口方法中调用this.getSqlSession()获取SqlSession。   如day75_trade
	方法2：
		程序员只需要编写mapper接口(相当于dao接口)，不需要编写 mapper接口的实现类，
		mybatis提供根据mapper接口和mapper.xml（映射文件）
		生成mapper接口动态代理对象(mapper接口的实现)。	
		
		具备什么规则生成mapper代理对象：
		Mapper.xml中的namespace等于mapper接口的地址。
		Mapper.xml中定义的sql的id（mapped statement的id）等于mapper.java中方法名
		Mapper.xml中定义的statement的parametertype等于mapper.java中方法的形参类型。
		Mapper.xml中定义的statement的resultType等于mapper.java中方法的返回值类型。
		
		开发两个文件：mapper.java和mapper.xml
			方式1：使用MapperFactoryBean，根据mapper接口生成代理对象。如上
			方式2：使用mapper自动扫描器。如下
		
 -->




<!--
	配置 mapper自动扫描器，扫描器在在mybatis和spring的整合包中
 		bean名称就是mapper类型（首字母小写），此方法不需要dao实现
 -->
<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <!-- 配置扫描包路径 ，如果扫描多个包路径，中间使用半角逗号或者分号分隔，也可以使用通配符-->
    <property name="basePackage" value="yycg.**.dao.mapper"/>
    <!-- 配置SqlSessionFactory -->
    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
</bean>




</beans>